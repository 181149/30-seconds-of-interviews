{"dependencies":[],"generated":{"js":"module.exports = [\n  {\n    \"name\": \"bem.md\",\n    \"question\": \"What is CSS BEM?\",\n    \"answer\": \"The BEM methodology is another naming convention for CSS classes. The BEM stands for Block, Element, Modifier which is an explanation for its structure. Block is a standalone component that is reusable across projects. Elements and modifiers are part of the block with no standalone meaning. Here is the example of the typical syntax:\\n\\n```css\\n/* block component */\\n.block {}\\n\\n/* element */\\n.block__element {}\\n\\n/* modifier */\\n.block__element-modifier {}\\n```\",\n    \"goodToHear\": [\n      \"Block is a top-level abstraction of a new component\",\n      \"Elements make no sense to be alone - they are tightly dependent on blocks\",\n      \"Modifier is a flag added to block or element so it makes them a bit more specific\"\n    ],\n    \"links\": [\n      \"[Writing clean and maintainable CSS](https://hackernoon.com/writing-clean-and-maintainable-css-using-bem-methodology-1dcbf810a664)\",\n      \"<!-- tags: (css) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": [\n      \"```css\\n/* block component */\\n.block {}\\n\\n/* element */\\n.block__element {}\\n\\n/* modifier */\\n.block__element-modifier {}\\n```\"\n    ]\n  },\n  {\n    \"name\": \"clone-object.md\",\n    \"question\": \"How do you clone an object in JavaScript?\",\n    \"answer\": \"Using the object spread operator `...`, the object's own enumerable properties can be copied\\ninto the new object. This creates a shallow clone of the object.\\n\\n```js\\nconst obj = { a: 1, b: 2 };\\nconst shallowClone = { ...obj };\\n```\\n\\nWith this technique, prototypes are ignored. In addition, nested objects are not cloned, but rather their references get copied, so nested objects still refer to the same objects as the original. Deep-cloning is much more complex in order to effectively clone any type of object (Dates, RegExp, Function, Set, etc) that may be nested within the object.\",\n    \"goodToHear\": [\n      \"JavaScript passes objects by reference, meaning that nested objects get their references copied, instead of their values.\",\n      \"The same method can be used to merge two objects.\",\n      \"`JSON.stringify()` is another alternative, but is CPU-intensive.\"\n    ],\n    \"links\": [\n      \"<!-- Whenever possible, link a more detailed explanation. -->\",\n      \"[MDN docs for Object.assign()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\",\n      \"[Clone an object in vanilla JS](http://voidcanvas.com/clone-an-object-in-vanilla-js-in-depth/)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": [\n      \"```js\\nconst obj = { a: 1, b: 2 };\\nconst shallowClone = { ...obj };\\n```\"\n    ]\n  },\n  {\n    \"name\": \"closures.md\",\n    \"question\": \"What is a closure in Javascript?\",\n    \"answer\": \"A closure is a function defined inside another function and has access to its lexical scope even when it is executing outside its lexical scope. The closure has access to variables in three scopes:\\n\\n* Variables declared in its own scope\\n* Variables declared in the scope of the parent function\\n* Variables declared in the global scope\",\n    \"goodToHear\": [\n      \"Closures are useful because they let you associate data with a function that operates on that data.\",\n      \"A closure can substitute an object with only a single method.\",\n      \"Closures can be used to emulate private methods.\"\n    ],\n    \"links\": [\n      \"[MDN docs for closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)\",\n      \"[What is a closure](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36)\",\n      \"[I never understood JavaScript closures](https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"comparing-objects.md\",\n    \"question\": \"How would you compare two objects in JavaScript?\",\n    \"answer\": \"Even though two different objects can have the same properties with equal values, they're not considered equal. When two objects are compared, they are being compared by their reference (location in memory), unlike primitive values which are compared by value. To compare two objects, they need to be of equal length and have the same properties.\\n\\nNote: this method ignores prototypes and only considers them equal if they have the same nested objects. Objects can be  complex structures which are difficult to compare.\\n\\n```js\\nfunction isShallowEqual(obj1, obj2) {\\n  const obj1Props = Object.getOwnPropertyNames(obj1);\\n  const obj2Props = Object.getOwnPropertyNames(obj2);\\n\\n  if (obj1Props.length != obj2Props.length) {\\n    return false\\n  }\\n\\n  for (const prop of obj1Props) {\\n    if (obj1[prop] !== obj2[prop]) {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n}\\n```\",\n    \"goodToHear\": [\n      \"Primitives like strings and numbers are compared by their value\",\n      \"Objects on the other hand are compared by their reference (location in memory)\"\n    ],\n    \"links\": [\n      \"[Object Equality in JavaScript](http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html)\",\n      \"[Deep comparison between two values](https://30secondsofcode.org/object#equals)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": [\n      \"```js\\nfunction isShallowEqual(obj1, obj2) {\\n  const obj1Props = Object.getOwnPropertyNames(obj1);\\n  const obj2Props = Object.getOwnPropertyNames(obj2);\\n\\n  if (obj1Props.length != obj2Props.length) {\\n    return false\\n  }\\n\\n  for (const prop of obj1Props) {\\n    if (obj1[prop] !== obj2[prop]) {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n}\\n```\"\n    ]\n  },\n  {\n    \"name\": \"css-preprocessors.md\",\n    \"question\": \"What are the advantages of using CSS preprocessors?\",\n    \"answer\": \"There are many advantages of using CSS preprocessors. Firstly, they allow us to write more maintainable and scalable CSS overall. Secondly, they provide syntax for easy to write nested selectors as well as variables for consistent theming. CSS preprocessors also allow us to write mixins to generate repeated CSS. On top of everything, they let us split code into multiple files (without needing to make HTTP request for each one).\",\n    \"goodToHear\": [\n      \"They allow us to write more maintainable and scalable CSS\",\n      \"Some disadvantages of using CSS preprocessors(setup, re-compilation time can be slow etc.)\"\n    ],\n    \"links\": [\n      \"[CSS Preprocessors](https://medium.com/@garyfagan/css-preprocessors-6f226fa16f27)\",\n      \"<!-- tags: (css) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"event-driven-programming.md\",\n    \"question\": \"What is event-driven programming?\",\n    \"answer\": \"Event-driven programming is building an application that is based on and responds to events. Whenever an event occurs, the application responds by running a callback function, which is registered to that event and context.\",\n    \"goodToHear\": [\n      \"Responds to events that occur by running a callback function\",\n      \"Follows a publish-subscribe pattern\"\n    ],\n    \"links\": [\n      \"[MDN docs on Events and Handlers](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Overview_of_Events_and_Handlers)\",\n      \"[Understanding Node.js event-driven architecture](https://medium.freecodecamp.org/understanding-node-js-event-driven-architecture-223292fcbc2d)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"fibonacci.md\",\n    \"question\": \"Generate an array, containing the Fibonacci sequence, up until the nth term\",\n    \"answer\": \"Create an empty array of the specific length, initializing the first two values (0 and 1). Use Array.reduce() to add values into the array, using the sum of the last two values, except for the first two.\\n\\n```js\\nconst fibonacci = n =>\\n  Array.from({ length: n }).reduce(\\n    (acc, val, i) => acc.concat(i > 1 ? acc[i - 1] + acc[i - 2] : i),\\n    []\\n  );\\n```\",\n    \"goodToHear\": [],\n    \"links\": [\n      \"[Similar problem](https://github.com/Chalarangelo/30-seconds-of-code/blob/master/snippets_archive/fibonacciUntilNum.md)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": [\n      \"```js\\nconst fibonacci = n =>\\n  Array.from({ length: n }).reduce(\\n    (acc, val, i) => acc.concat(i > 1 ? acc[i - 1] + acc[i - 2] : i),\\n    []\\n  );\\n```\"\n    ]\n  },\n  {\n    \"name\": \"flex-layout.md\",\n    \"question\": \"Use flexbox to create a 3-column layout where each of the columns has a width of 2/12, 7/12 and 3/12 of the screen width respectively. Use the following HTML code as a guide.\\n\\n```html\\n<div class=\\\"flex-grid\\\">\\n  <div class=\\\"col-2\\\"></div>\\n  <div class=\\\"col-7\\\"></div>\\n  <div class=\\\"col-3\\\"></div>\\n</div>\\n```\",\n    \"answer\": \"We only need to set the `display` property of the `flex-grid` element to `flex` and then apply the appropriate values for each column, using the `flex` property like this:\\n\\n```css\\n.flex-grid {\\n  display: flex;\\n}\\n\\n.col-2 {\\n  flex: 2;\\n}\\n\\n.col-7 {\\n  flex: 7;\\n}\\n\\n.col-3 {\\n  flex: 3;\\n}\\n```\",\n    \"goodToHear\": [],\n    \"links\": [\n      \"[MDN docs for basic concepts of flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox)\",\n      \"[A complete guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\",\n      \"<!-- tags: (css) -->\"\n    ],\n    \"questionCodeBlocks\": [\n      \"```html\\n<div class=\\\"flex-grid\\\">\\n  <div class=\\\"col-2\\\"></div>\\n  <div class=\\\"col-7\\\"></div>\\n  <div class=\\\"col-3\\\"></div>\\n</div>\\n```\"\n    ],\n    \"answerCodeBlocks\": [\n      \"```css\\n.flex-grid {\\n  display: flex;\\n}\\n\\n.col-2 {\\n  flex: 2;\\n}\\n\\n.col-7 {\\n  flex: 7;\\n}\\n\\n.col-3 {\\n  flex: 3;\\n}\\n```\"\n    ]\n  },\n  {\n    \"name\": \"floating-point.md\",\n    \"question\": \"What does `0.1 + 0.2 === 0.3` return?\",\n    \"answer\": \"It equals to `false` because JavaScript uses the IEEE 754 standard for Math and it makes use of 64-bit floating numbers. This causes precision errors when doing decimal calculations, in short, due to computers working in Base 2 while decimal is Base 10.\\n\\n```js\\n0.1 + 0.2; // 0.300000004\\n```\",\n    \"goodToHear\": [\n      \"A simple solution to this problem\"\n    ],\n    \"links\": [\n      \"[A simple helper function to check equality](https://github.com/Chalarangelo/30-seconds-of-code#approximatelyequal)\",\n      \"[Fix \\\"0.1 + 0.2 = 0.300000004\\\" in JavaScript](http://blog.blakesimpson.co.uk/read/61-fix-0-1-0-2-0-300000004-in-javascript)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": [\n      \"```js\\n0.1 + 0.2; // 0.300000004\\n```\"\n    ]\n  },\n  {\n    \"name\": \"for-each-map.md\",\n    \"question\": \"What is the difference between a `map` loop and a `forEach` loop?\",\n    \"answer\": \"Both loops iterate through the elements in an array. `.map()` maps each element to new element by calling the function on each element and it returns the new array. On the other hand, `.forEach()` executes a callback function for each element but does not return anything. `.forEach()` is generally used when causing a side effect on each iteration, whereas `.map()` is a common functional programming technique.\",\n    \"goodToHear\": [\n      \"Use `.forEach()` if you need to iterate over an array and cause mutations to the elements without needing to return values to generate a new array.\",\n      \"`.map()` is the right choice to keep data immutable where each value of the original array is mapped to a new array.\"\n    ],\n    \"links\": [\n      \"[MDN docs for forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\",\n      \"[MDN docs for map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\",\n      \"[JavaScript — Map vs. ForEach](https://codeburst.io/javascript-map-vs-foreach-f38111822c0f)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"functional-programming.md\",\n    \"question\": \"What is functional programming?\",\n    \"answer\": \"Functional programming is a paradigm in which programs are built in a declarative manner using pure functions that avoid shared state and mutable data. Functions that always return the same value for the same input and don't produce side effects are the pillar of functional programming. Many programmers consider this to be the best approach to software development as it reduces bugs and mental overhead.\",\n    \"goodToHear\": [\n      \"Cleaner, more concise development experience\",\n      \"Simple function composition\",\n      \"Features of JavaScript that enable functional programming (`.map`, `.reduce` etc.)\",\n      \"JavaScript is multi-paradigm programming language (Object-Oriented Programming and Functional Programming live in harmony)\"\n    ],\n    \"links\": [\n      \"[Javascript and Functional Programming: An Introduction](https://hackernoon.com/javascript-and-functional-programming-an-introduction-286aa625e26d)\",\n      \"[Master the JavaScript Interview: What is Functional Programming?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"hoisting-example.md\",\n    \"question\": \"What will be the output of this code?\\n\\n```js\\nvar foo = 1;\\nvar foobar = function () {\\n    console.log(foo);\\n    var foo = 2;\\n};\\nfoobar();\\n```\",\n    \"answer\": \"Firstly `foobar` won't look for the outer scope as `var foo = 2;`'s declaration is hoisted. On the other hand,  JavaScript doesn't hoist initialization, so the output of this code is going to be `undefined`.\",\n    \"goodToHear\": [\n      \"Hoisting is JavaScript’s default behavior of moving declarations to the top\",\n      \"Mention of `strict` mode\"\n    ],\n    \"links\": [\n      \"[MDN docs for hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [\n      \"```js\\nvar foo = 1;\\nvar foobar = function () {\\n    console.log(foo);\\n    var foo = 2;\\n};\\nfoobar();\\n```\"\n    ],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"hoisting.md\",\n    \"question\": \"How does hoisting work in JavaScript?\",\n    \"answer\": \"Hoisting is a JavaScript mechanism where variables and function declarations are put into memory during the compile phase. This means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local.\\n\\n```js\\nconsole.log(hoist); // Output: undefined\\n\\nvar hoist = 'The variable has been hoisted.';\\n```\",\n    \"goodToHear\": [\n      \"Hoisting is JavaScript’s default behavior of moving declarations to the top\",\n      \"Functions are hoisted before variables\",\n      \"Mention of `strict` mode\",\n      \"`const` variables must be both declared and initialised before use\",\n      \"`let` variables must be declared before use\"\n    ],\n    \"links\": [\n      \"[MDN docs for hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting)\",\n      \"[Understanding Hoisting in JavaScript](https://scotch.io/tutorials/understanding-hoisting-in-javascript)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": [\n      \"```js\\nconsole.log(hoist); // Output: undefined\\n\\nvar hoist = 'The variable has been hoisted.';\\n```\"\n    ]\n  },\n  {\n    \"name\": \"image-accessibility.md\",\n    \"question\": \"What is the purpose of `alt` attribute on images?\",\n    \"answer\": \"The `alt` attribute provides alternative information for an image if a user cannot view it. If the image is for decorative purposes only, the `alt` attribute should be empty. On the other hand, if image contains information the `alt` attribute should describe image.\",\n    \"goodToHear\": [\n      \"Decorative images should have empty `alt` tag\"\n    ],\n    \"links\": [\n      \"[A good basis for accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML)\",\n      \"<!-- tags: (html) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"node-event-loop.md\",\n    \"question\": \"What is the event loop in Node.js?\",\n    \"answer\": \"The event loop handles all async callbacks. Callbacks are queued in a loop, while other code runs, and will run one by one when the response for each one has been received.\",\n    \"goodToHear\": [\n      \"The event loop allows Node.js to perform non-blocking I/O operations, despite the fact that JavaScript is single-threaded\"\n    ],\n    \"links\": [\n      \"<!-- Whenever possible, link a more detailed explanation. -->\",\n      \"[Node.js docs on event loop, timers and process.nextTick()](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)\",\n      \"<!-- tags: (node,javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"null-vs-undefined.md\",\n    \"question\": \"What are the differences between `null` and `undefined`?\",\n    \"answer\": \"In JavaScript, two values discretely represent nothing - `undefined` and `null`. The concrete difference between them is that `null` is explicit, while `undefined` is implicit. When a property does not exist or a variable has not been given a value, the value is `undefined`. `null` is set as the value to explicitly indicate “no value”. In essence, `undefined` is used when the nothing is not known, and `null` is used when the nothing is known.\",\n    \"goodToHear\": [\n      \"`typeof undefined` returns `undefined`\",\n      \"`typeof null` returns `object`. However, it is still a primitive value\",\n      \"`undefined == null` equals to `true`\"\n    ],\n    \"links\": [\n      \"[MDN docs for null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null)\",\n      \"[MDN docs for undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"pass-by-value-reference.md\",\n    \"question\": \"Does JavaScript pass by value or by reference?\",\n    \"answer\": \"JavaScript always passes by value. However, with objects, the value is a reference to the object.\",\n    \"goodToHear\": [\n      \"Difference between pass-by-value and pass-by-reference\"\n    ],\n    \"links\": [\n      \"[JavaScript Value vs Reference](https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"prototypal-inheritance.md\",\n    \"question\": \"How does prototypal inheritance differ from classical inheritance?\",\n    \"answer\": \"In the classical inheritance paradigm, object instances inherit their properties and functions from a class, which acts as a blueprint for the object. Object instances are typically created using a constructor and the `new` keyword.\\n\\nIn the prototypal inheritance paradigm, object instances inherit directly from other objects and are typically created using factory functions or `Object.create()`. Finally, object instances can be composed from many different objects, allowing for selective inheritance.\",\n    \"goodToHear\": [\n      \"Classes create hierarches and taxonomies.\",\n      \"Prototypal inheritance allows for a flat prototype delegation hierarchy.\"\n    ],\n    \"links\": [\n      \"[MDN docs for inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\",\n      \"[Differences between class and prototypal inheritance](https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"reference-example.md\",\n    \"question\": \"What is the output of the following code?\\n\\n```js\\nconst a = [1,2,3];\\nconst b = [1,2,3];\\nconst c = \\\"1,2,3\\\";\\n\\nconsole.log(a == c);\\nconsole.log(a == b);\\n```\",\n    \"answer\": \"The first `console.log` outputs `true` because JavaScript's compiler performs type conversion and therefore it compares to strings by their value. On the other hand, the second `console.log` outputs `false` because Arrays are  Objects and Objects are compared by reference.\",\n    \"goodToHear\": [\n      \"JavaScript performs automatic type conversion\",\n      \"Objects are compared by reference\",\n      \"Primitives are compared by value\"\n    ],\n    \"links\": [\n      \"[JavaScript Value vs Reference](https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [\n      \"```js\\nconst a = [1,2,3];\\nconst b = [1,2,3];\\nconst c = \\\"1,2,3\\\";\\n\\nconsole.log(a == c);\\nconsole.log(a == b);\\n```\"\n    ],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"rel-noopener.md\",\n    \"question\": \"Where and why is the `rel=\\\"noopener\\\"` attribute used?\",\n    \"answer\": \"The `rel=\\\"noopener\\\"` is an attribute used in `<a>` elements (hyperlinks). It prevents pages from having a `window.opener` property, which would otherwise point to the page from where the link was opened and would allow the page opened from the hyperlink to manipulate the page where the hyperlink is.\",\n    \"goodToHear\": [\n      \"`rel=\\\"noopener\\\"` is applied to hyperlinks.\",\n      \"`rel=\\\"noopener\\\"` prevents opened links from manipulating the source page.\"\n    ],\n    \"links\": [\n      \"<!-- Whenever possible, link a more detailed explanation. -->\",\n      \"[Open external anchors using rel=\\\"noopener\\\"](https://developers.google.com/web/tools/lighthouse/audits/noopener)\",\n      \"[About rel=\\\"noopener\\\"](https://mathiasbynens.github.io/rel-noopener/)\",\n      \"<!-- tags: (html) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"return-semicolon.md\",\n    \"question\": \"What does the following function return?\\n\\n```js\\nfunction greet() {\\n  return\\n  {\\n    message: 'hello'\\n  }\\n}\\n```\",\n    \"answer\": \"Because of JavaScript's automatic semicolon placement compiler places a semicolon after `return` keyword and therefore it returns `undefined` without single error being thrown.\",\n    \"goodToHear\": [\n      \"Automatic semicolon placement can lead to time-consuming bugs\",\n      \"Semicolons can be omitted in JavaScript if you know the cases in which they are required\"\n    ],\n    \"links\": [\n      \"[Automatic semicolon insertion in JavaScript](http://2ality.com/2011/05/semicolon-insertion.html)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [\n      \"```js\\nfunction greet() {\\n  return\\n  {\\n    message: 'hello'\\n  }\\n}\\n```\"\n    ],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"type-comparison.md\",\n    \"question\": \"What is the difference between `==` and `===`?\",\n    \"answer\": \"When using triple equals in JavaScript we are testing for strict equality. This means both the type and the value we are comparing have to be the same. On the other hand, double equals first performs type coercion and then checks for loose equality.\",\n    \"goodToHear\": [\n      \"Whenever possible, use triple equals to test equality\",\n      \"Type coercion - converts values into a common type\",\n      \"Mention of falsy values and their comparison\",\n      \"`NaN` is not equivalent to anything, not even itself\"\n    ],\n    \"links\": [\n      \"[MDN docs for comparison operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"typeof-typeof.md\",\n    \"question\": \"What would the following code return?\\n\\n```js\\nconsole.log(typeof typeof 0);\\n```\",\n    \"answer\": \"`typeof 0` returns `\\\"number\\\"` and therefore `typeof \\\"number\\\"` would return `string`.\",\n    \"goodToHear\": [],\n    \"links\": [\n      \"[MDN docs for typeof](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [\n      \"```js\\nconsole.log(typeof typeof 0);\\n```\"\n    ],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"types.md\",\n    \"question\": \"What are JavaScript data types?\",\n    \"answer\": \"The latest ECMAScript standard defines seven data types, six of them being primitive: `Boolean`, `Null`, `Undefined`, `Number`, `String`, `Symbol` and one non-primitive data type: `Object`.\",\n    \"goodToHear\": [\n      \"Mention of newly added `Symbol` data type\",\n      \"`Array`, `Date` and `function` are all of type `object`\",\n      \"Functions in JavaScript are objects with the capability of being callable\"\n    ],\n    \"links\": [\n      \"[MDN docs for data types and data structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)\",\n      \"[Understanding Data Types in JavaScript](https://www.digitalocean.com/community/tutorials/understanding-data-types-in-javascript)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"use-strict.md\",\n    \"question\": \"What does `'use strict'` do and what are some of the key benefits to using it?\",\n    \"answer\": \"Including `'use strict'` at the beginning of your JavaScript source file enables strict mode, which enfores more strict parsing and error handling of JavaScript code. It is considered a good practice and offers a lot of benefits, such as:\\n\\n* Easier debugging due to eliminating silent errors.\\n* Disallows variable redefinition.\\n* Prevents accidental global variables.\\n* Oftentimes provides increased performance over identical code that is not running in strict mode.\\n* Simplifies `eval()` and `arguments`.\\n* Helps make JavaScript more secure.\",\n    \"goodToHear\": [\n      \"Eliminates `this` coercion, throwing an error when `this` references a value of `null` or `undefined`.\",\n      \"Throws an error on invalid usage of `delete`.\",\n      \"Prohibits some syntax likely to be defined in future versions of ECMAScript\"\n    ],\n    \"links\": [\n      \"[MDN docs for strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"wrap-content.md\",\n    \"question\": \"What is the reason for wrapping the entire content of a JavaScript source file in a function block?\",\n    \"answer\": \"This technique is very common in JavaScript libraries. It creates a closure around the entire contents of the file which creates a private namespace and thereby helps avoid potential name clashes between different JavaScript modules and libraries\",\n    \"goodToHear\": [\n      \"Used among many popular JavaScript libraries\",\n      \"Creates a private namespace\"\n    ],\n    \"links\": [\n      \"[MDN docs for closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)\",\n      \"<!-- tags: (javascript) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  },\n  {\n    \"name\": \"z-index.md\",\n    \"question\": \"How does Z index function?\",\n    \"answer\": \"When elements overlap, z-order determines which one covers the other.\",\n    \"goodToHear\": [\n      \"`z-index` only applies to positioned elements (except `static`)\",\n      \"How to organize z-indexes on large scale projects\"\n    ],\n    \"links\": [\n      \"[MDN docs for z-index](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index)\",\n      \"[Understanding CSS z-index](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index)\",\n      \"[What No One Told You About Z-Index](https://philipwalton.com/articles/what-no-one-told-you-about-z-index/)\",\n      \"<!-- tags: (css) -->\"\n    ],\n    \"questionCodeBlocks\": [],\n    \"answerCodeBlocks\": []\n  }\n];"},"hash":"5081d35971f8cb7e337345ff40863099","cacheData":{}}